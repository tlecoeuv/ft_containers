
						MAP to do list:

*|V|comprendre les arbres binaires et trouver des liens:
	https://en.wikipedia.org/wiki/Red%E2%80%93black_tree

*|V|Pair: comprendre.
		utiliser la pair de la std.

*| |RedBlackTree:
Créer un Red black tree avec des méthodes etc,
	|V|structure de base, constructeur, destructeurs.
	|V|Insertion.
	|V|Deletion.
		|V|initial steps 1: find x.
		|V|initial step 2.
		---->pb quand x et nullptr pour déterminer les cas.
			->de quoi a ton besoins?
				-x sibling.
				-x parent.
			->solution? créer des leafs nodes, sans right/left ni pair, juste parents.
				->chaque node a 2 leafs, qui sont remplacés quand ils ont un fils.
		|V|case 0.
		|V|case 1.
		|V|case 2.
		|V|case 3.
		|V|case 4.
	|V|Search.
	|V|Destructeur.
	|V|segfault delete inexistant value.

MAP:
*| |Member classes:
	| |value_compare.

*| |Member functions:
	| |Constructors:
		| |default.
		| |copy.
		| |it.
	| |Destructor.
	| |operator=.

*| |Element access:
	| |operator[].

*| |iterators
	| |begin.
	| |end.
	| |rbegin.
	| |rend.

*| |Capacity:
	| |empty.
	| |size.
	| |max_size.

*| |Modifiers:
	| |clear.
	| |insert.
	| |erase.
	| |swap.

*| |Lookup:
	| |count.
	| |find.
	| |equal_range.
	| |lower_bound.
	| |upper_bound.

*| |Observers:
	| |key_comp.
	| |value_comp.

*| |Non-member functions:
	| |operators.
	| |swap.
